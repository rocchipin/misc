import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.dataformat.xml.XmlMapper;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.server.reactive.ServerHttpResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.ClientResponse;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.nio.charset.StandardCharsets;

@Component
public class CustomRouteFilter extends AbstractGatewayFilterFactory<CustomRouteFilter.Config> {

    private final WebClient backend1Client;
    private final WebClient backend2Client;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final XmlMapper xmlMapper = new XmlMapper();

    public CustomRouteFilter(WebClient backend1Client, WebClient backend2Client) {
        super(Config.class);
        this.backend1Client = backend1Client;
        this.backend2Client = backend2Client;
    }

    @Override
    public GatewayFilter apply(Config config) {
        return (exchange, chain) -> {
            // üëâ Ici, on ne d√©l√®gue PAS √† chain.filter(exchange)
            // car on veut contr√¥ler la logique de routage enti√®rement

            return callBackend1(exchange, config)
                    .flatMap(clientResponse -> {
                        HttpStatus status = clientResponse.statusCode();
                        if (status != null && status.is2xxSuccessful()) {
                            // ‚úÖ Backend1 OK : transformer JSON -> XML
                            return handleBackend1Success(exchange, clientResponse);
                        } else {
                            // ‚ùå Sinon : fallback sur Backend2
                            return callBackend2(exchange, config)
                                    .flatMap(resp2 -> forwardResponse(exchange, resp2));
                        }
                    });
        };
    }

    // --- BACKEND1 ---
    private Mono<ClientResponse> callBackend1(ServerWebExchange exchange, Config config) {
        return backend1Client.get()
                .uri(config.getBackend1Path())
                .headers(h -> mapHeadersForBackend1(exchange, h))
                .exchangeToMono(Mono::just);
    }

    private Mono<Void> handleBackend1Success(ServerWebExchange exchange, ClientResponse clientResponse) {
        ServerHttpResponse response = exchange.getResponse();
        return clientResponse.bodyToMono(String.class)
                .flatMap(json -> {
                    try {
                        JsonNode node = objectMapper.readTree(json);
                        String xml = xmlMapper.writeValueAsString(node);
                        byte[] bytes = xml.getBytes(StandardCharsets.UTF_8);

                        response.setStatusCode(HttpStatus.OK);
                        response.getHeaders().setContentType(MediaType.APPLICATION_XML);
                        response.getHeaders().setContentLength(bytes.length);

                        return response.writeWith(Mono.just(response.bufferFactory().wrap(bytes)));
                    } catch (Exception e) {
                        response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR);
                        return response.setComplete();
                    }
                });
    }

    // --- BACKEND2 ---
    private Mono<ClientResponse> callBackend2(ServerWebExchange exchange, Config config) {
        return backend2Client.get()
                .uri(config.getBackend2Path())
                .headers(h -> mapHeadersForBackend2(exchange, h))
                .exchangeToMono(Mono::just);
    }

    private Mono<Void> forwardResponse(ServerWebExchange exchange, ClientResponse clientResponse) {
        ServerHttpResponse response = exchange.getResponse();
        response.setStatusCode(clientResponse.statusCode());
        response.getHeaders().putAll(clientResponse.headers().asHttpHeaders());

        return response.writeWith(
                clientResponse.bodyToFlux(org.springframework.core.io.buffer.DataBuffer.class)
                        .map(db -> response.bufferFactory().wrap(db.asByteBuffer()))
        );
    }

    // --- HEADERS ---
    private void mapHeadersForBackend1(ServerWebExchange exchange, HttpHeaders headers) {
        headers.addAll(exchange.getRequest().getHeaders());
        // TODO: mapping sp√©cifique pour backend1
    }

    private void mapHeadersForBackend2(ServerWebExchange exchange, HttpHeaders headers) {
        headers.addAll(exchange.getRequest().getHeaders());
        // TODO: mapping sp√©cifique pour backend2
    }

    // --- CONFIG ---
    public static class Config {
        private String backend1Path;
        private String backend2Path;

        public String getBackend1Path() {
            return backend1Path;
        }

        public void setBackend1Path(String backend1Path) {
            this.backend1Path = backend1Path;
        }

        public String getBackend2Path() {
            return backend2Path;
        }

        public void setBackend2Path(String backend2Path) {
            this.backend2Path = backend2Path;
        }
    }
}
