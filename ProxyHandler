@Component
@RequiredArgsConstructor
public class ProxyHandler {

    private final WebClient backend1Client;
    private final WebClient backend2Client;
    private final ObjectMapper objectMapper = new ObjectMapper(); // JSON
    private final XmlMapper xmlMapper = new XmlMapper(); // JSON -> XML

    public Mono<ServerResponse> handleRequest(ServerRequest request) {
        // 1. Appeler backend1
        return callBackend1(request)
                .flatMap(response -> {
                    if (response.getStatusCode().is2xxSuccessful()) {
                        // 2a. Si OK → transformer JSON en XML
                        return response.bodyToMono(String.class)
                                .flatMap(json -> {
                                    try {
                                        JsonNode node = objectMapper.readTree(json);
                                        String xml = xmlMapper.writeValueAsString(node);
                                        return ServerResponse.ok()
                                                .contentType(MediaType.APPLICATION_XML)
                                                .bodyValue(xml);
                                    } catch (Exception e) {
                                        return ServerResponse.status(HttpStatus.INTERNAL_SERVER_ERROR)
                                                .bodyValue("Error transforming JSON to XML");
                                    }
                                });
                    } else {
                        // 2b. Sinon → fallback backend2
                        return callBackend2(request)
                                .flatMap(b2 -> ServerResponse.status(b2.statusCode())
                                        .headers(h -> h.addAll(b2.headers().asHttpHeaders()))
                                        .body(b2.bodyToMono(String.class), String.class));
                    }
                });
    }

    private Mono<ClientResponse> callBackend1(ServerRequest request) {
        return backend1Client.get()
                .uri(uriBuilder -> {
                    // Mapping query params si besoin
                    request.queryParams().forEach(uriBuilder::queryParam);
                    return uriBuilder.build();
                })
                .headers(h -> mapHeadersForBackend1(request, h))
                .exchangeToMono(Mono::just);
    }

    private Mono<ClientResponse> callBackend2(ServerRequest request) {
        return backend2Client.get()
                .uri(uriBuilder -> {
                    // Mapping query params backend2 si besoin
                    request.queryParams().forEach(uriBuilder::queryParam);
                    return uriBuilder.build();
                })
                .headers(h -> mapHeadersForBackend2(request, h))
                .exchangeToMono(Mono::just);
    }

    private void mapHeadersForBackend1(ServerRequest original, HttpHeaders headers) {
        headers.addAll(original.headers().asHttpHeaders());
        // TODO : custom mapping headers pour backend1
    }

    private void mapHeadersForBackend2(ServerRequest original, HttpHeaders headers) {
        headers.addAll(original.headers().asHttpHeaders());
        // TODO : custom mapping headers pour backend2
    }
}
